#!/usr/bin/env bash
# ---------------------------------------------------------------------------
# popjrun-yarn - Start a POP-Java application inside the Hadoop environment thanks to YARN.
#
# Copyright 2016
# All rights reserved.
#
# Usage: popjrun-yarn [-h|--help] [-j|--jar] [-m|--main] [-C|--containers] [-c|--vcpu] [-M|--memory] [--premain] [--postmain]
#
# Revision history:
# 2016-06-22 Created script
#            Handle types, call HDFS and YARN
# ---------------------------------------------------------------------------

PROGNAME=${0##*/}
VERSION="0.1"

clean_up() { # Perform pre-exit housekeeping
  return
}

error_exit() {
  echo -e "${PROGNAME}: ${1:-"Unknown Error"}" >&2
  clean_up
  exit 1
}

graceful_exit() {
  clean_up
  exit
}

signal_exit() { # Handle trapped signals
  case $1 in
    INT)
      error_exit "Program interrupted by user" ;;
    TERM)
      echo -e "\n$PROGNAME: Program terminated" >&2
      graceful_exit ;;
    *)
      error_exit "$PROGNAME: Terminating on unknown signal" ;;
  esac
}

is_numeric() {
  test "$1" -eq "$1" > /dev/null 2> /dev/null
  return $?
}

usage() {
  echo -e "Usage: $PROGNAME [-h|--help] [-c|--containers] [-t|--vcpu] [-M|--memory] [--premain] [--postmain] {-p|-pop} {-j|--jar} {-m|--main}"
}

help_message() {
  cat <<- _EOF_
  $PROGNAME ver. $VERSION
  Start a POP-Java application inside the Hadoop environment thanks to YARN.

  $(usage)

  Options:
  -h, --help         Display this help message and exit.
  -p, --pop        * The popjava executable jar to start the application.
  -j, --jar        * The .jar file containing all the dependency of the project.
  -m, --main       * The main class of the POP-Java application.
  -c, --containers   How many containers should be deployed on the cluster.
  -t, --vcores       How many vCores should each container have.
  -M, --memory       How much Memory should each container have.
  --premain          A script to execute on each container to setup the enviroment
  --postmain         A script to execute after the program complete

  Extra arguments will be passed to the main class.

_EOF_
  return
}

# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT"  INT

containers=1
vcpu=1
memory=3072

args=

# Parse command-line
while [[ -n $1 ]]; do
  case $1 in
    -h | --help)
      help_message; graceful_exit ;;
    -j | --jar)
      shift
      if [ -e "$1" ]
      then
        jar="$1"
      else
        error_exit "Can't find the application jar file"
      fi
      ;;
    -m | --main)
      shift
      main="$1" ;;
    -c | --containers)
      shift
      if is_numeric "$1"
      then
        containers="$1"
      else
        error_exit "Containers should be numeric"
      fi
      ;;
    -t | --vcores)
      shift
      if is_numeric "$1"
      then
        vcpu="$1"
      else
        error_exit "vCores should be numeric"
      fi
      ;;
    -M | --memory)
      shift
      if is_numeric "$1"
      then
        memory="$1"
      else
        error_exit "Memory should be numeric"
      fi
      ;;
    -p | --pop)
      shift
      if [ -e "$1" ]
      then
        popjava="$1"
      else
        error_exit "The popjava jar file can't be found"
      fi
      ;;
	--premain)
	  shift
	  if [ -e "$1" ]
	  then
		premain="$1"
	  else
		error_exit "A premain script was set but not found"
	  fi
	  ;;
	--postmain)
	  shift
	  if [ -e "$1" ]
	  then
		postmain="$1"
	  else
		error_exit "A postmain script was set but not found"
	  fi
	  ;;
#    -* | --*)
#      usage
#      error_exit "Unknown option $1" ;;
    *)
#      args="$args "$1"" ;;
       break;
  esac
  shift
done

# Check required arguments

if [ -z "$main" ]
then
  error_exit "-m|-main option is required"
fi

if [ ! -e "$popjava" ]
then
  error_exit "-p|-pop option is required"
fi

if [ ! -e "$jar" ]
then
  error_exit "-j|-jar option is required"
fi

# Main logic

# Temp dir on HDFS
TMP_DIR=`mktemp -ud`

# Create temp dir
hdfs dfs -mkdir "$TMP_DIR"
# Put packed jar in HDFS
hdfs dfs -copyFromLocal "$jar" "${TMP_DIR}/pop-app.jar"
hdfs dfs -copyFromLocal "$popjava" "${TMP_DIR}/popjava.jar"

# Pre and Post main scripts
if [ -n "$premain" ]
then
	hdfs dfs -copyFromLocal "$premain" "${TMP_DIR}/premain.sh"
fi
if [ -n "$postmain" ]
then
	hdfs dfs -copyFromLocal "$postmain" "${TMP_DIR}/postmain.sh"
fi

# Start YARN client
yarn jar "$popjava" --dir "hdfs://${TMP_DIR}" --vcores "$vcpu" --memory "$memory" --containers "$containers" --main "$main" "$@"

# Cleanup by removing temp dir
hdfs dfs -rm -R "$TMP_DIR"

graceful_exit
