#!/usr/bin/env bash
# ---------------------------------------------------------------------------
# popjrun-yarn - Start a POP-Java application inside the Hadoop environment thanks to YARN.
#
# Copyright 2016
# All rights reserved.
#
# Usage: popjrun-yarn [-h|--help] [-j|--jar] [-m|--main] [-C|--containers] [-c|--vcpu] [-M|--memory]
#
# Revision history:
# 2016-06-22 Created script
#            Handle types, call HDFS and YARN
# ---------------------------------------------------------------------------

PROGNAME=${0##*/}
VERSION="0.1"

HDFS_TMP="/tmp"

clean_up() { # Perform pre-exit housekeeping
  return
}

error_exit() {
  echo -e "${PROGNAME}: ${1:-"Unknown Error"}" >&2
  clean_up
  exit 1
}

graceful_exit() {
  clean_up
  exit
}

signal_exit() { # Handle trapped signals
  case $1 in
    INT)
      error_exit "Program interrupted by user" ;;
    TERM)
      echo -e "\n$PROGNAME: Program terminated" >&2
      graceful_exit ;;
    *)
      error_exit "$PROGNAME: Terminating on unknown signal" ;;
  esac
}

is_numeric() {
  test "$1" -eq "$1" > /dev/null
  return $?
}

usage() {
  echo -e "Usage: $PROGNAME [-h|--help] [-c|--containers] [-p|--vcpu] [-m|--memory] <-j|--jar> <-m|--main>"
}

help_message() {
  cat <<- _EOF_
  $PROGNAME ver. $VERSION
  Start a POP-Java application inside the Hadoop environment thanks to YARN.

  $(usage)

  Options:
  -h, --help         Display this help message and exit.
  -j, --jar        * The .jar file containing all the dependency of the project.
  -m, --main       * The main class of the POP-Java application.
  -c, --containers   How many containers should be deployed on the cluster.
  -p, --vcores       How many vCores should each container have.
  -m, --memory       How much Memory should each container have.

  Extra arguments will be passed to the main class.

_EOF_
  return
}

# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT"  INT

containers=5
vcpu=1
memory=256

args=

# Parse command-line
while [[ -n $1 ]]; do
  case $1 in
    -h | --help)
      help_message; graceful_exit ;;
    -j | --jar)
      shift
      jar="$1" ;;
    -m | --main)
      shift
      main="$1" ;;
    -C | --containers)
      shift
      if is_numeric "$1"
      then
        containers="$1"
      else
        error_exit "Containers should be numeric"
      fi
      ;;
    -c | --vcores)
      shift
      if is_numeric "$1"
      then
        vcpu="$1"
      else
        error_exit "vCPU should be numeric"
      fi
      ;;
    -M | --memory)
      shift
      if is_numeric "$1"
      then
        memory="$1"
      else
        error_exit "Memory should be numeric"
      fi
      ;;
    -* | --*)
      usage
      error_exit "Unknown option $1" ;;
    *)
      args="$args "$1"" ;;
  esac
  shift
done

# Check required arguments
if [ -z "$jar" ]
then
  error_exit "-j|-jar option is required"
fi

if [ -z "$main" ]
then
  error_exit "-m|-main option is required"
fi

# Main logic

# Temp dir on HDFS
TMP_DIR=${HDFS_TMP}/$(basename `mktemp -ud`)
BASE_JAR=`basename "$jar"`
HDFS_JAR="${TMP_DIR}/${BASE_JAR}"

# Find yarn app
YARN_APP=`find . -name yarn-app*.jar | tail -n 1`
if [ -z "YARN_APP" ]
then
  error_exit "Couldn't find the default YARN application, did you run mvn install?"
fi

# Create temp dir
hdfs dfs -mkdir "$TMP_DIR"
# Put packed jar in HDFS
hdfs dfs -copyFromLocal "$jar" "${TMP_DIR}/pop-app.jar"
hdfs dfs -copyFromLocal "$YARN_APP" "${TMP_DIR}/yarn-app.jar"

hdfs dfs -ls "$TMP_DIR"

# Start YARN client
yarn jar "$YARN_APP" ch.heia.pop.yarn.app.YARNClient --dir "hdfs://${TMP_DIR}" --vcores "$vcpu" --memory "$memory" --containers "$containers" --main "$main" $args

# Cleanup by removing temp dir
hdfs dfs -rm -R "$TMP_DIR"

graceful_exit
